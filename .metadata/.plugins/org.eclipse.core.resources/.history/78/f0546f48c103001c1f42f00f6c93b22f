package rs.ac.bg.etf.pp1;

import java.util.ArrayList;
import java.util.List;

import rs.ac.bg.etf.pp1.test.CompilerError;
import rs.ac.bg.etf.pp1.test.CompilerError.CompilerErrorType;
import rs.etf.pp1.symboltable.Tab;

public class Compiler2 implements rs.ac.bg.etf.pp1.test.Compiler{
	private static List<CompilerError> compileErrors;
	
	public static void addError(int line, String message, CompilerErrorType type) {
		compileErrors.add(new CompilerError(line, message, type));
	}
	
	public static void tsdump() {
		Tab.dump();
	}

	@Override
	public List<CompilerError> compile(String sourceFilePath, String outputFilePath) {
		compileErrors=new ArrayList<CompilerError>();
		
Logger log = Logger.getLogger(Compiler.class);
		
		Reader br = null;
		try {
			File sourceCode = new File(args[0]);
			log.info("Compiling source file: " + sourceCode.getAbsolutePath());
			
			br = new BufferedReader(new FileReader(sourceCode));
			Yylex lexer = new Yylex(br);
			
			MJParser p = new MJParser(lexer);
	        Symbol s = p.parse();  //pocetak parsiranja
	        
	        Program prog = (Program)(s.value); 
	     //  if (!p.errorDetected)
			//log.info(prog.toString(""));
	       //else
			log.info("===================================");
			Tab.init();
			SemanticAnalyzer v = new SemanticAnalyzer();
			prog.traverseBottomUp(v); 
			
			log.info("===================================");
	      
			log.info(" Print count calls = " + v.printCallCount);
			if (!v.mainDef) log.error("Nije definisana main funkcija");
			
			log.info("===================================");
			tsdump();
			// ispis prepoznatih programskih konstrukcija
		
	  	
			log.info("===================================");
			
			if(!p.errorDetected && v.passed()){
				File objFile = new File("test/program.obj");
				if(objFile.exists()) objFile.delete();
				
				CodeGenerator codeGenerator = new CodeGenerator();
				prog.traverseBottomUp(codeGenerator);
				Code.dataSize = v.nVars;
				Code.mainPc = codeGenerator.getMainPc();
				Code.write(new FileOutputStream(objFile));
				log.info("Parsiranje uspesno zavrseno!");
			}else{
				log.error("Parsiranje NIJE uspesno zavrseno!");
			}
			
		} 
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}
		
		
		
		return compileErrors;
	}
	
	

}
