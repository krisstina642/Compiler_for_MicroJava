

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
   public void syntax_error(Symbol cur_token) {
      report_error("Sintaksna greska", cur_token, ((Symbol)cur_token).left);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info, int line) {
    errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji: ").append(((Symbol)info).left).append (" poziciji: ").append(((Symbol)info).right);
            
        log.error(msg.toString());
        Compiler2.addError( line, message ,1);
    }
:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID, DEC, SCALAR;
terminal COLON, EXTENDS, NEW, DAND, DOT, DIV, MOD, SWITCH, MINUS, RBRACKET, CONST, LBRACKET, ENUM, MUL;
terminal BREAK, CASE, READ, INC, WHILE, DOR, DO, CLASS, QUESTION_MARK, CONTINUE, TRUE, FALSE;
terminal Integer NUMBER; 
terminal String IDENT, ISEQUAL, LESS_OR_EQUAL, GREATER, GREATER_OR_EQUAL, LESS, NOTEQUAL ;
terminal Character CHARCONST;

terminal IF, ELSE;

nonterminal VarDecl VarDecl;
nonterminal VarDecls VarDecls;
nonterminal VarDeclList VarDeclList;
nonterminal VarMid VarMid;
nonterminal VarLoop VarLoop;
nonterminal VarTail VarTail;
nonterminal VarClassDecl VarClassDecl;
nonterminal VarClassDecls VarClassDecls;
nonterminal VarClassDeclList VarClassDeclList;
nonterminal VarClassDeclListNo VarClassDeclListNo;
nonterminal VarClassMid VarClassMid;
nonterminal VarClassLoop VarClassLoop;
nonterminal VarClassTail VarClassTail;
nonterminal VarClassStart VarClassStart;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal DesignatorOpt DesignatorOpt;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal ActParsList ActParsList;
nonterminal ActPars ActPars;
nonterminal DeclList DeclList;
nonterminal DeclD DeclD;
nonterminal ConstTail ConstTail;
nonterminal ConstDecl ConstDecl;
nonterminal ConstLoop ConstLoop;
nonterminal ConstMid ConstMid;
nonterminal ClassExtendOpt ClassExtendOpt;
nonterminal ClassMethodOpt ClassMethodOpt;
nonterminal PrintStatementExprOpt PrintStatementExprOpt;
nonterminal CaseList CaseList;
nonterminal Case Case;
nonterminal Else Else;
nonterminal Assignop Assignop;
nonterminal ElseBegin ElseBegin;
nonterminal IfEnd IfEnd;
nonterminal IfCatchCondError IfCatchCondError;
nonterminal DoBegin DoBegin;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodType, MethodTypeN, MethodDeclList, Designator, BoolConst, ConstD, ClassName, ClassDecl, Term, Expr, Factor, DesignatorStatement, DesignatorName, Relop, Condition, CondTerm, CondFact, DesOptBeginArray;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type,  Expres, StartClass, ArrayOrNot, DesignatorOptList, Addop, Mulop;

Program ::= 	(Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= 	(ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclList ::= 	(DeclarationList) DeclList:D1 DeclD:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :} 
		 		|
		 		(NoDecl) {: RESULT=new NoDecl(); :} /* epsilon */
				;

DeclD ::= 	(ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
		 	|
		 	(VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
		 	|
		 	(ClassDeclaration) ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :}	
			|	 	
		 	(ErrorDeclDSemi) error:e SEMI:l 
		 	{: parser.report_error("Greska prilikom definisanja, Izvrsen oporavak do ; u liniji " + lleft+ " poziciji " + lright, e, lleft);  :} {: RESULT=new ErrorDeclDSemi(); :}	
		 	|	 	
		 	(ErrorDeclDComma) error:e COMMA:l 
		 	{: parser.report_error("Greska prilikom definisanja, Izvrsen oporavak do , u liniji " + lleft+ " poziciji " + lright, e, lleft);  :} {: RESULT=new ErrorDeclDComma(); :}
		 	;
		
BoolConst ::= 	(True) TRUE {: RESULT=new True(); :}
				|
				(False) FALSE {: RESULT=new False(); :}
				;
		
ConstD ::= 	(Constant) NUMBER:t {: RESULT=new Constant(t); RESULT.setLine(tleft); :}
			|
			(CharConst) CHARCONST:t {: RESULT=new CharConst(t); RESULT.setLine(tleft); :}
			|
			(BoolConstant) BoolConst:t {: RESULT=new BoolConstant(t); RESULT.setLine(tleft); :}
			;
		
ConstTail ::= 	(TailConst) IDENT:varName EQUAL ConstD:con SEMI {: RESULT=new TailConst(varName, con); RESULT.setLine(varNameleft); :}
				|
				(ErrorTail) error:e SEMI:l
				{: parser.report_error("Greska prilikom definisanja konstante, Izvrsen oporavak do ; u liniji " + lleft, e, lleft);  :} {: RESULT=new ErrorTail(); :}	 			
				;
		
ConstMid ::=	(ConstMiddle) IDENT:varName EQUAL ConstD:con {: RESULT=new ConstMiddle(varName, con); RESULT.setLine(varNameleft); :} 
				|
				(ConstMidError) error:l 
				{: parser.report_error("Greska prilikom definisanja konstante, Izvrsen oporavak do , u liniji " + lleft, l, lleft);  :} {: RESULT=new ConstMidError(); :} 
				;
		
ConstDecl ::= 	(SimpleConstDeclaration) CONST Type:varType ConstTail:C1 {: RESULT=new SimpleConstDeclaration(varType, C1); RESULT.setLine(varTypeleft); :}
				|
				(ConstMidLoopTail) CONST Type:varType ConstMid:C1 COMMA ConstLoop:C2 {: RESULT=new ConstMidLoopTail(varType, C1, C2); RESULT.setLine(varTypeleft); :}
				;
		
ConstLoop ::= 	(ConstDeclarationList) ConstMid:C1 COMMA ConstLoop:C2 {: RESULT=new ConstDeclarationList(C1, C2); RESULT.setLine(C1left); :} 
				|
				(ConstDeclarationTail) ConstTail:C1 {: RESULT=new ConstDeclarationTail(C1); RESULT.setLine(C1left); :}
				;  
				
ArrayOrNot ::=	(Array) LBRACKET:l RBRACKET {: RESULT=new Array(); :}
				|
				(NotArray) {: RESULT=new NotArray(); :} 
				;	
			
VarDeclList ::= (VarDeclListt) VarDecl:V1 VarDeclList:V2 {: RESULT=new VarDeclListt(V1, V2); RESULT.setLine(V1left); :}
				|
				(EmptyVarDeclList) {: RESULT=new EmptyVarDeclList(); :} 
				;
				
VarDecl ::= (SimpleeeVarDecl) Type:varType VarTail:V1 {: RESULT=new SimpleeeVarDecl(varType, V1); RESULT.setLine(varTypeleft); :}
			|
			(VarDeclLoopTail)  Type:varType VarMid:V1 COMMA VarLoop:V2 {: RESULT=new VarDeclLoopTail(varType, V1, V2); RESULT.setLine(varTypeleft); :}
			;
			
VarTail ::=	(VarTailSemi) IDENT:varName ArrayOrNot:a SEMI {: RESULT=new VarTailSemi(varName, a); RESULT.setLine(varNameleft); :}
			|
			(VarTailError) error:e SEMI:l
			{: parser.report_error("Greska prilikom definisanja promenljive, Izvrsen oporavak do ; u liniji " + lleft, e, lleft);  :} {: RESULT=new VarTailError(); :}	 			
			;
		
VarMid ::=	(VarMiddle) IDENT:varName ArrayOrNot:a {: RESULT=new VarMiddle(varName, a); RESULT.setLine(varNameleft); :}
			|
			(VarMidError) error:l
			{: parser.report_error("Greska prilikom definisanja promenljive, Izvrsen oporavak do , u liniji " + lleft+ " ", l, lleft);  :} {: RESULT=new VarMidError(); :} 
			;
		
VarLoop ::= (VarrLoop) VarMid:mid COMMA VarLoop:loop {: RESULT=new VarrLoop(mid, loop); RESULT.setLine(midleft); :} 
			|
			(VarDeclTail) VarTail:tail {: RESULT=new VarDeclTail(tail); RESULT.setLine(tailleft); :}
			;


VarClassDeclListNo ::=  (VarClasssDeclNoListt) VarClassDecl:V1 VarClassDeclList:V2 {: RESULT=new VarClasssDeclNoListt(V1, V2); RESULT.setLine(V1left); :}
						|
						(EmptyVarClassDeclNoList) {: RESULT=new EmptyVarClassDeclNoList(); :} 
						;
				
VarClassStart  ::=	(VarClStart) VarClassDeclList:V1 LBRACE {: RESULT=new VarClStart(V1); RESULT.setLine(V1left); :}
					|
					(ClasssDeclErr) error:e LBRACE:l
					{: parser.report_error("Greska prilikom definisanja promenljiveeee u untrasnjoj klasi, Izvrsen oporavak u liniji " + lleft, e, lleft);  :} {: RESULT=new ClasssDeclErr(); :}
					;	
							
VarClassDeclList ::= (VarClasssDeclListt) VarClassDecl:V1 VarClassDeclList:V2 {: RESULT=new VarClasssDeclListt(V1, V2); RESULT.setLine(V1left); :} 
					|
					(EmptyVarClassDeclList) {: RESULT=new EmptyVarClassDeclList(); :}
					|
					(VarClassDeclListErrLbr) error:l LBRACE
					{: parser.report_error("Greska prilikom definisanja promenljive u untrasnjoj klasi, Izvrsen oporavak do { u liniji " + lleft, l, lleft);  :} {: RESULT=new VarClassDeclListErrLbr(); :}			
					|
					(VarClassDeclListErrSemi) error:l SEMI
					{: parser.report_error("Greska prilikom definisanja promenljive u untrasnjoj klasi, Izvrsen oporavak do ; u liniji " + lleft, l, lleft);  :} {: RESULT=new VarClassDeclListErrSemi(); :}									
					;

VarClassDecl ::=    (VarClassDeclaration) Type:varType VarClassMid:V1 COMMA VarClassLoop:V2 SEMI {: RESULT=new VarClassDeclaration(varType, V1, V2); RESULT.setLine(varTypeleft); :}			
					|
					(VarClassSimpleDeclaration) Type:varType VarClassTail:V1 SEMI {: RESULT=new VarClassSimpleDeclaration(varType, V1); RESULT.setLine(varTypeleft); :}
					;
											
VarClassTail ::=    (VarClassTailSemi) IDENT:varName ArrayOrNot:a {: RESULT=new VarClassTailSemi(varName, a); RESULT.setLine(varNameleft); :} 
					|
					(ClasssSDeclErr) error:l
					{: parser.report_error("Greska prilikom definisanja promenljive u untrasnjoj klasi, Izvrsen oporavak u liniji " + lleft, l, lleft);  :} {: RESULT=new ClasssSDeclErr(); :}			
					;
		
VarClassMid ::=     (VarClassMiddle) IDENT:varName ArrayOrNot:a {: RESULT=new VarClassMiddle(varName, a); RESULT.setLine(varNameleft); :} ;
		
VarClassLoop ::=    (VarrClasssLoop) VarClassMid:V1 COMMA VarClassLoop:V2 {: RESULT=new VarrClasssLoop(V1, V2); RESULT.setLine(V1left); :} 
					|
					(VarClassDeclTail) VarClassTail:V1 {: RESULT=new VarClassDeclTail(V1); RESULT.setLine(V1left); :}
					; 
			
ClassExtendOpt ::=  (ClassExt) EXTENDS Type:T1 LBRACE {: RESULT=new ClassExt(T1); RESULT.setLine(T1left); :}
     				|
					(ClassExtError) error:e LBRACE:l
					{: parser.report_error("Greska prilikom definisanja natklase, Izvrsen oporavak u liniji " + lleft, e, lleft);  :} {: RESULT=new ClassExtError(); :}							
					|
					(NoClassExt) LBRACE {: RESULT=new NoClassExt(); :}
					;
			
ClassDecl ::= 	(ClasssDecl) CLASS ClassName:name VarClassStart:V1 MethodDecl:M2 MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClasssDecl(name, V1, M2, M3); RESULT.setLine(nameleft); :}						
				|
				(ClassDeclNoMethod) CLASS ClassName:name VarClassDeclListNo:V1 RBRACE {: RESULT=new ClassDeclNoMethod(name, V1); RESULT.setLine(nameleft); :}				
				;
				
ClassName ::= (ClassName) IDENT:className ClassExtendOpt:C1 {: RESULT=new ClassName(className, C1); RESULT.setLine(classNameleft); :};


Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDecl:M1 MethodDeclList:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodeclaDecl) {: RESULT=new NoMethodeclaDecl(); :} /* epsilon */
					;
				
MethodDecl ::=  (MethodDeclar) MethodTypeN:metTypeNam LPAREN FormPars:F1 VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclar(metTypeNam, F1, V2, S3); RESULT.setLine(metTypeNamleft); :}
				;

MethodTypeN::= (MethodTypeName) Type:retType IDENT:metName {: RESULT=new MethodTypeName(retType, metName); RESULT.setLine(retTypeleft); :}
				| 
				(MethodTypeVoid) VOID IDENT:metName {: RESULT=new MethodTypeVoid(metName); RESULT.setLine(metNameleft); :}
				;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		 	 |
		 	 (NoFormParam) RPAREN {: RESULT=new NoFormParam(); :}
			 ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamDecl:F1 FormalParamList:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) Type:t IDENT:iden ArrayOrNot:A1 RPAREN {: RESULT=new SingleFormalParamDecl(t, iden, A1); RESULT.setLine(tleft); :}
					|
			 		(FormalParsErrorComma) error:e RPAREN:l
			 		{: parser.report_error("Greska prilikom deklaracija formalnog parametra funkcije, Izvrsen oporavak do ) u liniji " + lleft, e, lleft);  :} {: RESULT=new FormalParsErrorComma(); :} 		 		
					;
				
FormalParamDecl ::= (FormalParamDeclNoBracket) Type:t IDENT:iden ArrayOrNot:A1 COMMA {: RESULT=new FormalParamDeclNoBracket(t, iden, A1); RESULT.setLine(tleft); :}
					|
					(FormalParamErrorComma) error:e COMMA:l
					{: parser.report_error("Greska prilikom deklaracija formalnog parametra funkcije, Izvrsen oporavak do , u liniji " + lleft, e, lleft);  :} {: RESULT=new FormalParamErrorComma(); :} 
					;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				  |
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
					;

Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   	  |
		   	  (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		   	  ; 
		   	
IfCatchCondError ::= (IfCondError) Condition:C1 RPAREN {: RESULT=new IfCondError(C1); RESULT.setLine(C1left); :}
					 | 
					 (ErrorIfCondition) error:e RPAREN:l
		   			 {: parser.report_error("Neispravan logicki izraz unutar if konstrukcije: Izvrsen oporavak do ) u liniji " + lleft, e, lleft);  :} {: RESULT=new ErrorIfCondition(); :}
		   			 ;

Unmatched ::= (UnmatchedIf) IF LPAREN IfCatchCondError:I1 Statement:S2 {: RESULT=new UnmatchedIf(I1, S2); RESULT.setLine(I1left); :}
		 	  |
		 	  (UnmatchedIfElse) IF LPAREN IfCatchCondError:I1 IfEnd:I2 ElseBegin:E3 {: RESULT=new UnmatchedIfElse(I1, I2, E3); RESULT.setLine(I1left); :}
		 	  ;
		 		
ElseBegin::=(ElseBegMatched) ELSE Matched:M1 {: RESULT=new ElseBegMatched(M1); RESULT.setLine(M1left); :}
			|
			(ElseBegUnmatched) ELSE Unmatched:U1 {: RESULT=new ElseBegUnmatched(U1); RESULT.setLine(U1left); :}
			;
			
IfEnd ::= (IfEnd) Matched:M1 {: RESULT=new IfEnd(M1); RESULT.setLine(M1left); :};

Matched ::= (StatementDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			| 
			(ErrorStmtMatches) error:e SEMI:l
		   	{: parser.report_error("Neispravna dodela: Izvrsen oporavak do ; u liniji " + lleft, e, lleft);  :} {: RESULT=new ErrorStmtMatches(); :}
		   	|
			(DoStatement) DoBegin:D1 StatementList:S2 WHILE LPAREN Condition:C3 RPAREN SEMI {: RESULT=new DoStatement(D1, S2, C3); RESULT.setLine(D1left); :}
			|
			(SwitchStatement) SWITCH LPAREN Expr:E1 RPAREN LBRACE CaseList:C2 RBRACE SEMI {: RESULT=new SwitchStatement(E1, C2); RESULT.setLine(E1left); :}
			|
			(BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
			|
			(ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
			|
			(ReturnStatement) RETURN:r SEMI {: RESULT=new ReturnStatement(); :}
			|
			(ReturnExpr) RETURN Expr:expr SEMI {: RESULT=new ReturnExpr(expr); RESULT.setLine(exprleft); :}
			|
			(ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
			|
			(PrintStatement) PRINT LPAREN Expr:E1 /*PrintStatementExprOpt*/ RPAREN SEMI {: RESULT=new PrintStatement(E1); RESULT.setLine(E1left); :}
			|
			(StatementStatements) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementStatements(S1); RESULT.setLine(S1left); :}
			;

DoBegin ::= (DoBeg) DO {: RESULT=new DoBeg(); :};			


Else ::= (ElseExists) ELSE Statement:S1 {: RESULT=new ElseExists(S1); RESULT.setLine(S1left); :}
		 |
		 (NoElse) {: RESULT=new NoElse(); :} /* epsilon */
		 ;
		
CaseList ::= (Cases) CaseList:C1 Case:C2 {: RESULT=new Cases(C1, C2); RESULT.setLine(C1left); :}
			 |
			 (NoCase) {: RESULT=new NoCase(); :} /* epsilon */
			 ;
			
Case ::= (Case) CASE NUMBER:N1 COLON StatementList:S2 {: RESULT=new Case(N1, S2); RESULT.setLine(N1left); :};
			
/*PrintStatementExprOpt ::= (PrintStatementExprOptNum) COMMA NUMBER:n
						    |
						    (NoPrintStm) 
						    ; */

DesignatorStatement ::= (DesignatorStatementAsign) Designator:D1 Assignop:A2 Expr:expr {: RESULT=new DesignatorStatementAsign(D1, A2, expr); RESULT.setLine(D1left); :}
						|
						(DesignatorStatementActPars) Designator:d LPAREN ActPars:A1 RPAREN {: RESULT=new DesignatorStatementActPars(d, A1); RESULT.setLine(dleft); :}
						|
						(DesignatorStatementNoActPars) Designator:d LPAREN RPAREN {: RESULT=new DesignatorStatementNoActPars(d); RESULT.setLine(dleft); :}
						|
						(DesignatorStatementInc) Designator:d INC {: RESULT=new DesignatorStatementInc(d); RESULT.setLine(dleft); :}
						|
						(DesignatorStatementDec) Designator:d DEC {: RESULT=new DesignatorStatementDec(d); RESULT.setLine(dleft); :}
						|
		 				(ErrorDeclLista) error:e SEMI:l
						{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft +", greska pri dodeli vrednosti", e, lleft);  :} {: RESULT=new ErrorDeclLista(); :} 
		 
						;

ActPars ::= (ActParsWithComma) Expr:E1 COMMA ActPars:A2 {: RESULT=new ActParsWithComma(E1, A2); RESULT.setLine(E1left); :}
			|
			(SimpleActPars) Expr:E1 {: RESULT=new SimpleActPars(E1); RESULT.setLine(E1left); :}
			;
			
Condition ::= (SimpleCondition) CondTerm:C1 {: RESULT=new SimpleCondition(C1); RESULT.setLine(C1left); :}
			  |
			  (Conditions) Condition:C1 DOR CondTerm:C2 {: RESULT=new Conditions(C1, C2); RESULT.setLine(C1left); :}
			  ;

CondTerm ::= (SimpleCondTerm) CondFact:C1 {: RESULT=new SimpleCondTerm(C1); RESULT.setLine(C1left); :}
			 |
			 (CondTerms)  CondTerm:C1 DAND CondFact:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :}
			 ;
			
CondFact ::= (SimpleCondFact) Expr:E1 {: RESULT=new SimpleCondFact(E1); RESULT.setLine(E1left); :}
			 |
			 (CondFactRelop) Expr:e1 Relop:R1 Expr:e2 {: RESULT=new CondFactRelop(e1, R1, e2); RESULT.setLine(e1left); :}
		 	;	
			
Expr ::= (AddExpr) Expr:te Addop:a Term:t {: RESULT=new AddExpr(te, a, t); RESULT.setLine(teleft); :}
	 	 |
	 	 (TermExprMinus) MINUS Term:t {: RESULT=new TermExprMinus(t); RESULT.setLine(tleft); :}
	 	 |
	 	 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
	 	 ; 

Term ::= (TermFactor) Factor:t {: RESULT=new TermFactor(t); RESULT.setLine(tleft); :}
		 |
		 (TermsMulop) Term:expr Mulop:m Factor:term {: RESULT=new TermsMulop(expr, m, term); RESULT.setLine(exprleft); :}
		 ;

Factor ::=  (FuncCallWithPars) Designator:func LPAREN ActPars:A1 RPAREN {: RESULT=new FuncCallWithPars(func, A1); RESULT.setLine(funcleft); :}
			|
			(FuncCallNoPars) Designator:func LPAREN RPAREN {: RESULT=new FuncCallNoPars(func); RESULT.setLine(funcleft); :}
			|
			(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
			|
			(FctorSwitch)SWITCH LPAREN Expr:E1 RPAREN LBRACE CaseList:C2 RBRACE {: RESULT=new FctorSwitch(E1, C2); RESULT.setLine(E1left); :}
			|
			(FactorConstNum) NUMBER:n {: RESULT=new FactorConstNum(n); RESULT.setLine(nleft); :}
			|
			(FactorConstChar) CHARCONST:t {: RESULT=new FactorConstChar(t); RESULT.setLine(tleft); :}
			|
			(FactorConstBool) BoolConst:t {: RESULT=new FactorConstBool(t); RESULT.setLine(tleft); :}
			|
			(FactorNew) NEW Type:t {: RESULT=new FactorNew(t); RESULT.setLine(tleft); :} 
			|
			(FactorNewWithExpr) NEW Type:t LBRACKET Expr:E1 RBRACKET {: RESULT=new FactorNewWithExpr(t, E1); RESULT.setLine(tleft); :}
			|
			(FactorExpr) LPAREN Expr:expr RPAREN {: RESULT=new FactorExpr(expr); RESULT.setLine(exprleft); :}
			;
			
DesignatorName ::=	  (DesName) IDENT:name {: RESULT=new DesName(name); RESULT.setLine(nameleft); :};
				
Designator ::=		  (Designator) DesignatorName:dName DesignatorOptList:d {: RESULT=new Designator(dName, d); RESULT.setLine(dNameleft); :};

DesignatorOptList ::= (DesignatorOpts) DesOptBeginArray:d Expr:e RBRACKET {: RESULT=new DesignatorOpts(d, e); RESULT.setLine(dleft); :} 
					  |
					  (DesignatorOptDot) DOT IDENT:name {: RESULT=new DesignatorOptDot(name); RESULT.setLine(nameleft); :}
					  |
					  (NoDesignatorOpt) {: RESULT=new NoDesignatorOpt(); :}
					  ;
					  
DesOptBeginArray::=( DesArray ) LBRACKET {: RESULT=new DesArray(); :};
						
Assignop ::= (Equal) EQUAL {: RESULT=new Equal(); :};

Relop  ::=  (RelopIsE) ISEQUAL:e {: RESULT=new RelopIsE(e); RESULT.setLine(eleft); :}
  			|
			(RelopNotE) NOTEQUAL:e {: RESULT=new RelopNotE(e); RESULT.setLine(eleft); :}
			|
			(RelopGr) GREATER:e {: RESULT=new RelopGr(e); RESULT.setLine(eleft); :}
			|
			(RelopGrOrEq) GREATER_OR_EQUAL:e {: RESULT=new RelopGrOrEq(e); RESULT.setLine(eleft); :}
			|
			(RelopLe) LESS:e {: RESULT=new RelopLe(e); RESULT.setLine(eleft); :}
			|
			(RelopLeOrEq) LESS_OR_EQUAL:e {: RESULT=new RelopLeOrEq(e); RESULT.setLine(eleft); :}
			;

Addop ::=   (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
			|
			(AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
			|
			(Scalarr) SCALAR {: RESULT=new Scalarr(); :}
			;
			
Mulop ::=   (MullopMul) MUL {: RESULT=new MullopMul(); :}
			|
			(MullopDiv) DIV {: RESULT=new MullopDiv(); :}
			|
			(MullopMod) MOD {: RESULT=new MullopMod(); :}
			
			;
		


